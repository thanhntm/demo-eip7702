"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@lit-labs";
exports.ids = ["vendor-chunks/@lit-labs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@lit-labs/ssr-dom-shim/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@lit-labs/ssr-dom-shim/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomElementRegistry: () => (/* binding */ CustomElementRegistryShimWithRealType),\n/* harmony export */   CustomEvent: () => (/* reexport safe */ _lib_events_js__WEBPACK_IMPORTED_MODULE_1__.CustomEvent),\n/* harmony export */   Element: () => (/* binding */ ElementShimWithRealType),\n/* harmony export */   ElementInternals: () => (/* reexport safe */ _lib_element_internals_js__WEBPACK_IMPORTED_MODULE_0__.ElementInternals),\n/* harmony export */   Event: () => (/* reexport safe */ _lib_events_js__WEBPACK_IMPORTED_MODULE_1__.Event),\n/* harmony export */   EventTarget: () => (/* reexport safe */ _lib_events_js__WEBPACK_IMPORTED_MODULE_1__.EventTarget),\n/* harmony export */   HTMLElement: () => (/* binding */ HTMLElementShimWithRealType),\n/* harmony export */   HYDRATE_INTERNALS_ATTR_PREFIX: () => (/* reexport safe */ _lib_element_internals_js__WEBPACK_IMPORTED_MODULE_0__.HYDRATE_INTERNALS_ATTR_PREFIX),\n/* harmony export */   ariaMixinAttributes: () => (/* reexport safe */ _lib_element_internals_js__WEBPACK_IMPORTED_MODULE_0__.ariaMixinAttributes),\n/* harmony export */   customElements: () => (/* binding */ customElements)\n/* harmony export */ });\n/* harmony import */ var _lib_element_internals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/element-internals.js */ \"(ssr)/./node_modules/@lit-labs/ssr-dom-shim/lib/element-internals.js\");\n/* harmony import */ var _lib_events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/events.js */ \"(ssr)/./node_modules/@lit-labs/ssr-dom-shim/lib/events.js\");\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n\n\n\n// In an empty Node.js vm, we need to patch the global context.\n// TODO: Remove these globalThis assignments when we remove support\n// for vm modules (--experimental-vm-modules).\nglobalThis.Event ??= _lib_events_js__WEBPACK_IMPORTED_MODULE_1__.EventShim;\nglobalThis.CustomEvent ??= _lib_events_js__WEBPACK_IMPORTED_MODULE_1__.CustomEventShim;\nconst attributes = new WeakMap();\nconst attributesForElement = (element) => {\n    let attrs = attributes.get(element);\n    if (attrs === undefined) {\n        attributes.set(element, (attrs = new Map()));\n    }\n    return attrs;\n};\n// The typings around the exports below are a little funky:\n//\n// 1. We want the `name` of the shim classes to match the real ones at runtime,\n//    hence e.g. `class Element`.\n// 2. We can't shadow the global types with a simple class declaration, because\n//    then we can't reference the global types for casting, hence e.g.\n//    `const ElementShim = class Element`.\n// 3. We want to export the classes typed as the real ones, hence e.g.\n//    `const ElementShimWithRealType = ElementShim as object as typeof Element;`.\n// 4. We want the exported names to match the real ones, hence e.g.\n//    `export {ElementShimWithRealType as Element}`.\nconst ElementShim = class Element extends _lib_events_js__WEBPACK_IMPORTED_MODULE_1__.EventTargetShim {\n    constructor() {\n        super(...arguments);\n        this.__shadowRootMode = null;\n        this.__shadowRoot = null;\n        this.__internals = null;\n    }\n    get attributes() {\n        return Array.from(attributesForElement(this)).map(([name, value]) => ({\n            name,\n            value,\n        }));\n    }\n    get shadowRoot() {\n        if (this.__shadowRootMode === 'closed') {\n            return null;\n        }\n        return this.__shadowRoot;\n    }\n    get localName() {\n        return this.constructor.__localName;\n    }\n    get tagName() {\n        return this.localName?.toUpperCase();\n    }\n    setAttribute(name, value) {\n        // Emulate browser behavior that silently casts all values to string. E.g.\n        // `42` becomes `\"42\"` and `{}` becomes `\"[object Object]\"\"`.\n        attributesForElement(this).set(name, String(value));\n    }\n    removeAttribute(name) {\n        attributesForElement(this).delete(name);\n    }\n    toggleAttribute(name, force) {\n        // Steps reference https://dom.spec.whatwg.org/#dom-element-toggleattribute\n        if (this.hasAttribute(name)) {\n            // Step 5\n            if (force === undefined || !force) {\n                this.removeAttribute(name);\n                return false;\n            }\n        }\n        else {\n            // Step 4\n            if (force === undefined || force) {\n                // Step 4.1\n                this.setAttribute(name, '');\n                return true;\n            }\n            else {\n                // Step 4.2\n                return false;\n            }\n        }\n        // Step 6\n        return true;\n    }\n    hasAttribute(name) {\n        return attributesForElement(this).has(name);\n    }\n    attachShadow(init) {\n        const shadowRoot = { host: this };\n        this.__shadowRootMode = init.mode;\n        if (init && init.mode === 'open') {\n            this.__shadowRoot = shadowRoot;\n        }\n        return shadowRoot;\n    }\n    attachInternals() {\n        if (this.__internals !== null) {\n            throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': ` +\n                `ElementInternals for the specified element was already attached.`);\n        }\n        const internals = new _lib_element_internals_js__WEBPACK_IMPORTED_MODULE_0__.ElementInternalsShim(this);\n        this.__internals = internals;\n        return internals;\n    }\n    getAttribute(name) {\n        const value = attributesForElement(this).get(name);\n        return value ?? null;\n    }\n};\nconst ElementShimWithRealType = ElementShim;\n\nconst HTMLElementShim = class HTMLElement extends ElementShim {\n};\nconst HTMLElementShimWithRealType = HTMLElementShim;\n\n// For convenience, we provide a global instance of a HTMLElement as an event\n// target. This facilitates registering global event handlers\n// (e.g. for @lit/context ContextProvider).\n// We use this in in the SSR render function.\n// Note, this is a bespoke element and not simply `document` or `window` since\n// user code relies on these being undefined in the server environment.\nglobalThis.litServerRoot ??= Object.defineProperty(new HTMLElementShimWithRealType(), 'localName', {\n    // Patch localName (and tagName) to return a unique name.\n    get() {\n        return 'lit-server-root';\n    },\n});\nconst CustomElementRegistryShim = class CustomElementRegistry {\n    constructor() {\n        this.__definitions = new Map();\n    }\n    define(name, ctor) {\n        if (this.__definitions.has(name)) {\n            if (true) {\n                console.warn(`'CustomElementRegistry' already has \"${name}\" defined. ` +\n                    `This may have been caused by live reload or hot module ` +\n                    `replacement in which case it can be safely ignored.\\n` +\n                    `Make sure to test your application with a production build as ` +\n                    `repeat registrations will throw in production.`);\n            }\n            else {}\n        }\n        // Provide tagName and localName for the component.\n        ctor.__localName = name;\n        this.__definitions.set(name, {\n            ctor,\n            // Note it's important we read `observedAttributes` in case it is a getter\n            // with side-effects, as is the case in Lit, where it triggers class\n            // finalization.\n            //\n            // TODO(aomarks) To be spec compliant, we should also capture the\n            // registration-time lifecycle methods like `connectedCallback`. For them\n            // to be actually accessible to e.g. the Lit SSR element renderer, though,\n            // we'd need to introduce a new API for accessing them (since `get` only\n            // returns the constructor).\n            observedAttributes: ctor.observedAttributes ?? [],\n        });\n    }\n    get(name) {\n        const definition = this.__definitions.get(name);\n        return definition?.ctor;\n    }\n};\nconst CustomElementRegistryShimWithRealType = CustomElementRegistryShim;\n\nconst customElements = new CustomElementRegistryShimWithRealType();\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lit-labs/ssr-dom-shim/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lit-labs/ssr-dom-shim/lib/element-internals.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@lit-labs/ssr-dom-shim/lib/element-internals.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ElementInternals: () => (/* binding */ ElementInternalsShimWithRealType),\n/* harmony export */   ElementInternalsShim: () => (/* binding */ ElementInternalsShim),\n/* harmony export */   HYDRATE_INTERNALS_ATTR_PREFIX: () => (/* binding */ HYDRATE_INTERNALS_ATTR_PREFIX),\n/* harmony export */   ariaMixinAttributes: () => (/* binding */ ariaMixinAttributes)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/**\n * Map of ARIAMixin properties to attributes\n */\nconst ariaMixinAttributes = {\n    ariaAtomic: 'aria-atomic',\n    ariaAutoComplete: 'aria-autocomplete',\n    ariaBrailleLabel: 'aria-braillelabel',\n    ariaBrailleRoleDescription: 'aria-brailleroledescription',\n    ariaBusy: 'aria-busy',\n    ariaChecked: 'aria-checked',\n    ariaColCount: 'aria-colcount',\n    ariaColIndex: 'aria-colindex',\n    ariaColSpan: 'aria-colspan',\n    ariaCurrent: 'aria-current',\n    ariaDescription: 'aria-description',\n    ariaDisabled: 'aria-disabled',\n    ariaExpanded: 'aria-expanded',\n    ariaHasPopup: 'aria-haspopup',\n    ariaHidden: 'aria-hidden',\n    ariaInvalid: 'aria-invalid',\n    ariaKeyShortcuts: 'aria-keyshortcuts',\n    ariaLabel: 'aria-label',\n    ariaLevel: 'aria-level',\n    ariaLive: 'aria-live',\n    ariaModal: 'aria-modal',\n    ariaMultiLine: 'aria-multiline',\n    ariaMultiSelectable: 'aria-multiselectable',\n    ariaOrientation: 'aria-orientation',\n    ariaPlaceholder: 'aria-placeholder',\n    ariaPosInSet: 'aria-posinset',\n    ariaPressed: 'aria-pressed',\n    ariaReadOnly: 'aria-readonly',\n    ariaRequired: 'aria-required',\n    ariaRoleDescription: 'aria-roledescription',\n    ariaRowCount: 'aria-rowcount',\n    ariaRowIndex: 'aria-rowindex',\n    ariaRowSpan: 'aria-rowspan',\n    ariaSelected: 'aria-selected',\n    ariaSetSize: 'aria-setsize',\n    ariaSort: 'aria-sort',\n    ariaValueMax: 'aria-valuemax',\n    ariaValueMin: 'aria-valuemin',\n    ariaValueNow: 'aria-valuenow',\n    ariaValueText: 'aria-valuetext',\n    role: 'role',\n};\n// Shim the global element internals object\n// Methods should be fine as noops and properties can generally\n// be while on the server.\nconst ElementInternalsShim = class ElementInternals {\n    get shadowRoot() {\n        // Grab the shadow root instance from the Element shim\n        // to ensure that the shadow root is always available\n        // to the internals instance even if the mode is 'closed'\n        return this.__host\n            .__shadowRoot;\n    }\n    constructor(_host) {\n        this.ariaAtomic = '';\n        this.ariaAutoComplete = '';\n        this.ariaBrailleLabel = '';\n        this.ariaBrailleRoleDescription = '';\n        this.ariaBusy = '';\n        this.ariaChecked = '';\n        this.ariaColCount = '';\n        this.ariaColIndex = '';\n        this.ariaColSpan = '';\n        this.ariaCurrent = '';\n        this.ariaDescription = '';\n        this.ariaDisabled = '';\n        this.ariaExpanded = '';\n        this.ariaHasPopup = '';\n        this.ariaHidden = '';\n        this.ariaInvalid = '';\n        this.ariaKeyShortcuts = '';\n        this.ariaLabel = '';\n        this.ariaLevel = '';\n        this.ariaLive = '';\n        this.ariaModal = '';\n        this.ariaMultiLine = '';\n        this.ariaMultiSelectable = '';\n        this.ariaOrientation = '';\n        this.ariaPlaceholder = '';\n        this.ariaPosInSet = '';\n        this.ariaPressed = '';\n        this.ariaReadOnly = '';\n        this.ariaRequired = '';\n        this.ariaRoleDescription = '';\n        this.ariaRowCount = '';\n        this.ariaRowIndex = '';\n        this.ariaRowSpan = '';\n        this.ariaSelected = '';\n        this.ariaSetSize = '';\n        this.ariaSort = '';\n        this.ariaValueMax = '';\n        this.ariaValueMin = '';\n        this.ariaValueNow = '';\n        this.ariaValueText = '';\n        this.role = '';\n        this.form = null;\n        this.labels = [];\n        this.states = new Set();\n        this.validationMessage = '';\n        this.validity = {};\n        this.willValidate = true;\n        this.__host = _host;\n    }\n    checkValidity() {\n        // TODO(augustjk) Consider actually implementing logic.\n        // See https://github.com/lit/lit/issues/3740\n        console.warn('`ElementInternals.checkValidity()` was called on the server.' +\n            'This method always returns true.');\n        return true;\n    }\n    reportValidity() {\n        return true;\n    }\n    setFormValue() { }\n    setValidity() { }\n};\nconst ElementInternalsShimWithRealType = ElementInternalsShim;\n\nconst HYDRATE_INTERNALS_ATTR_PREFIX = 'hydrate-internals-';\n//# sourceMappingURL=element-internals.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdC1sYWJzL3Nzci1kb20tc2hpbS9saWIvZWxlbWVudC1pbnRlcm5hbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnRTtBQUN6RDtBQUNQIiwic291cmNlcyI6WyIvVXNlcnMvYXNlbnNpby9Eb2N1bWVudHMvV29ya3MvRnJlZWxhbmNlL2RlbW8tZWlwNzcwMi9kZW1vLWVpcDc3MDIvbm9kZV9tb2R1bGVzL0BsaXQtbGFicy9zc3ItZG9tLXNoaW0vbGliL2VsZW1lbnQtaW50ZXJuYWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuLyoqXG4gKiBNYXAgb2YgQVJJQU1peGluIHByb3BlcnRpZXMgdG8gYXR0cmlidXRlc1xuICovXG5leHBvcnQgY29uc3QgYXJpYU1peGluQXR0cmlidXRlcyA9IHtcbiAgICBhcmlhQXRvbWljOiAnYXJpYS1hdG9taWMnLFxuICAgIGFyaWFBdXRvQ29tcGxldGU6ICdhcmlhLWF1dG9jb21wbGV0ZScsXG4gICAgYXJpYUJyYWlsbGVMYWJlbDogJ2FyaWEtYnJhaWxsZWxhYmVsJyxcbiAgICBhcmlhQnJhaWxsZVJvbGVEZXNjcmlwdGlvbjogJ2FyaWEtYnJhaWxsZXJvbGVkZXNjcmlwdGlvbicsXG4gICAgYXJpYUJ1c3k6ICdhcmlhLWJ1c3knLFxuICAgIGFyaWFDaGVja2VkOiAnYXJpYS1jaGVja2VkJyxcbiAgICBhcmlhQ29sQ291bnQ6ICdhcmlhLWNvbGNvdW50JyxcbiAgICBhcmlhQ29sSW5kZXg6ICdhcmlhLWNvbGluZGV4JyxcbiAgICBhcmlhQ29sU3BhbjogJ2FyaWEtY29sc3BhbicsXG4gICAgYXJpYUN1cnJlbnQ6ICdhcmlhLWN1cnJlbnQnLFxuICAgIGFyaWFEZXNjcmlwdGlvbjogJ2FyaWEtZGVzY3JpcHRpb24nLFxuICAgIGFyaWFEaXNhYmxlZDogJ2FyaWEtZGlzYWJsZWQnLFxuICAgIGFyaWFFeHBhbmRlZDogJ2FyaWEtZXhwYW5kZWQnLFxuICAgIGFyaWFIYXNQb3B1cDogJ2FyaWEtaGFzcG9wdXAnLFxuICAgIGFyaWFIaWRkZW46ICdhcmlhLWhpZGRlbicsXG4gICAgYXJpYUludmFsaWQ6ICdhcmlhLWludmFsaWQnLFxuICAgIGFyaWFLZXlTaG9ydGN1dHM6ICdhcmlhLWtleXNob3J0Y3V0cycsXG4gICAgYXJpYUxhYmVsOiAnYXJpYS1sYWJlbCcsXG4gICAgYXJpYUxldmVsOiAnYXJpYS1sZXZlbCcsXG4gICAgYXJpYUxpdmU6ICdhcmlhLWxpdmUnLFxuICAgIGFyaWFNb2RhbDogJ2FyaWEtbW9kYWwnLFxuICAgIGFyaWFNdWx0aUxpbmU6ICdhcmlhLW11bHRpbGluZScsXG4gICAgYXJpYU11bHRpU2VsZWN0YWJsZTogJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJyxcbiAgICBhcmlhT3JpZW50YXRpb246ICdhcmlhLW9yaWVudGF0aW9uJyxcbiAgICBhcmlhUGxhY2Vob2xkZXI6ICdhcmlhLXBsYWNlaG9sZGVyJyxcbiAgICBhcmlhUG9zSW5TZXQ6ICdhcmlhLXBvc2luc2V0JyxcbiAgICBhcmlhUHJlc3NlZDogJ2FyaWEtcHJlc3NlZCcsXG4gICAgYXJpYVJlYWRPbmx5OiAnYXJpYS1yZWFkb25seScsXG4gICAgYXJpYVJlcXVpcmVkOiAnYXJpYS1yZXF1aXJlZCcsXG4gICAgYXJpYVJvbGVEZXNjcmlwdGlvbjogJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJyxcbiAgICBhcmlhUm93Q291bnQ6ICdhcmlhLXJvd2NvdW50JyxcbiAgICBhcmlhUm93SW5kZXg6ICdhcmlhLXJvd2luZGV4JyxcbiAgICBhcmlhUm93U3BhbjogJ2FyaWEtcm93c3BhbicsXG4gICAgYXJpYVNlbGVjdGVkOiAnYXJpYS1zZWxlY3RlZCcsXG4gICAgYXJpYVNldFNpemU6ICdhcmlhLXNldHNpemUnLFxuICAgIGFyaWFTb3J0OiAnYXJpYS1zb3J0JyxcbiAgICBhcmlhVmFsdWVNYXg6ICdhcmlhLXZhbHVlbWF4JyxcbiAgICBhcmlhVmFsdWVNaW46ICdhcmlhLXZhbHVlbWluJyxcbiAgICBhcmlhVmFsdWVOb3c6ICdhcmlhLXZhbHVlbm93JyxcbiAgICBhcmlhVmFsdWVUZXh0OiAnYXJpYS12YWx1ZXRleHQnLFxuICAgIHJvbGU6ICdyb2xlJyxcbn07XG4vLyBTaGltIHRoZSBnbG9iYWwgZWxlbWVudCBpbnRlcm5hbHMgb2JqZWN0XG4vLyBNZXRob2RzIHNob3VsZCBiZSBmaW5lIGFzIG5vb3BzIGFuZCBwcm9wZXJ0aWVzIGNhbiBnZW5lcmFsbHlcbi8vIGJlIHdoaWxlIG9uIHRoZSBzZXJ2ZXIuXG5leHBvcnQgY29uc3QgRWxlbWVudEludGVybmFsc1NoaW0gPSBjbGFzcyBFbGVtZW50SW50ZXJuYWxzIHtcbiAgICBnZXQgc2hhZG93Um9vdCgpIHtcbiAgICAgICAgLy8gR3JhYiB0aGUgc2hhZG93IHJvb3QgaW5zdGFuY2UgZnJvbSB0aGUgRWxlbWVudCBzaGltXG4gICAgICAgIC8vIHRvIGVuc3VyZSB0aGF0IHRoZSBzaGFkb3cgcm9vdCBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgICAgIC8vIHRvIHRoZSBpbnRlcm5hbHMgaW5zdGFuY2UgZXZlbiBpZiB0aGUgbW9kZSBpcyAnY2xvc2VkJ1xuICAgICAgICByZXR1cm4gdGhpcy5fX2hvc3RcbiAgICAgICAgICAgIC5fX3NoYWRvd1Jvb3Q7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKF9ob3N0KSB7XG4gICAgICAgIHRoaXMuYXJpYUF0b21pYyA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFBdXRvQ29tcGxldGUgPSAnJztcbiAgICAgICAgdGhpcy5hcmlhQnJhaWxsZUxhYmVsID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYUJyYWlsbGVSb2xlRGVzY3JpcHRpb24gPSAnJztcbiAgICAgICAgdGhpcy5hcmlhQnVzeSA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFDaGVja2VkID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYUNvbENvdW50ID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYUNvbEluZGV4ID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYUNvbFNwYW4gPSAnJztcbiAgICAgICAgdGhpcy5hcmlhQ3VycmVudCA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFEZXNjcmlwdGlvbiA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFEaXNhYmxlZCA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFFeHBhbmRlZCA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFIYXNQb3B1cCA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFIaWRkZW4gPSAnJztcbiAgICAgICAgdGhpcy5hcmlhSW52YWxpZCA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFLZXlTaG9ydGN1dHMgPSAnJztcbiAgICAgICAgdGhpcy5hcmlhTGFiZWwgPSAnJztcbiAgICAgICAgdGhpcy5hcmlhTGV2ZWwgPSAnJztcbiAgICAgICAgdGhpcy5hcmlhTGl2ZSA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFNb2RhbCA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFNdWx0aUxpbmUgPSAnJztcbiAgICAgICAgdGhpcy5hcmlhTXVsdGlTZWxlY3RhYmxlID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYU9yaWVudGF0aW9uID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVBsYWNlaG9sZGVyID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVBvc0luU2V0ID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVByZXNzZWQgPSAnJztcbiAgICAgICAgdGhpcy5hcmlhUmVhZE9ubHkgPSAnJztcbiAgICAgICAgdGhpcy5hcmlhUmVxdWlyZWQgPSAnJztcbiAgICAgICAgdGhpcy5hcmlhUm9sZURlc2NyaXB0aW9uID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVJvd0NvdW50ID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVJvd0luZGV4ID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVJvd1NwYW4gPSAnJztcbiAgICAgICAgdGhpcy5hcmlhU2VsZWN0ZWQgPSAnJztcbiAgICAgICAgdGhpcy5hcmlhU2V0U2l6ZSA9ICcnO1xuICAgICAgICB0aGlzLmFyaWFTb3J0ID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVZhbHVlTWF4ID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVZhbHVlTWluID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVZhbHVlTm93ID0gJyc7XG4gICAgICAgIHRoaXMuYXJpYVZhbHVlVGV4dCA9ICcnO1xuICAgICAgICB0aGlzLnJvbGUgPSAnJztcbiAgICAgICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYWJlbHMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2UgPSAnJztcbiAgICAgICAgdGhpcy52YWxpZGl0eSA9IHt9O1xuICAgICAgICB0aGlzLndpbGxWYWxpZGF0ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX19ob3N0ID0gX2hvc3Q7XG4gICAgfVxuICAgIGNoZWNrVmFsaWRpdHkoKSB7XG4gICAgICAgIC8vIFRPRE8oYXVndXN0amspIENvbnNpZGVyIGFjdHVhbGx5IGltcGxlbWVudGluZyBsb2dpYy5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9saXQvbGl0L2lzc3Vlcy8zNzQwXG4gICAgICAgIGNvbnNvbGUud2FybignYEVsZW1lbnRJbnRlcm5hbHMuY2hlY2tWYWxpZGl0eSgpYCB3YXMgY2FsbGVkIG9uIHRoZSBzZXJ2ZXIuJyArXG4gICAgICAgICAgICAnVGhpcyBtZXRob2QgYWx3YXlzIHJldHVybnMgdHJ1ZS4nKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJlcG9ydFZhbGlkaXR5KCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc2V0Rm9ybVZhbHVlKCkgeyB9XG4gICAgc2V0VmFsaWRpdHkoKSB7IH1cbn07XG5jb25zdCBFbGVtZW50SW50ZXJuYWxzU2hpbVdpdGhSZWFsVHlwZSA9IEVsZW1lbnRJbnRlcm5hbHNTaGltO1xuZXhwb3J0IHsgRWxlbWVudEludGVybmFsc1NoaW1XaXRoUmVhbFR5cGUgYXMgRWxlbWVudEludGVybmFscyB9O1xuZXhwb3J0IGNvbnN0IEhZRFJBVEVfSU5URVJOQUxTX0FUVFJfUFJFRklYID0gJ2h5ZHJhdGUtaW50ZXJuYWxzLSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbGVtZW50LWludGVybmFscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lit-labs/ssr-dom-shim/lib/element-internals.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lit-labs/ssr-dom-shim/lib/events.js":
/*!***********************************************************!*\
  !*** ./node_modules/@lit-labs/ssr-dom-shim/lib/events.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomEvent: () => (/* binding */ CustomEventShimWithRealType),\n/* harmony export */   CustomEventShim: () => (/* binding */ CustomEventShimWithRealType),\n/* harmony export */   Event: () => (/* binding */ EventShimWithRealType),\n/* harmony export */   EventShim: () => (/* binding */ EventShimWithRealType),\n/* harmony export */   EventTarget: () => (/* binding */ EventTargetShimWithRealType),\n/* harmony export */   EventTargetShim: () => (/* binding */ EventTargetShimWithRealType)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Event_cancelable, _Event_bubbles, _Event_composed, _Event_defaultPrevented, _Event_timestamp, _Event_propagationStopped, _Event_type, _Event_target, _Event_isBeingDispatched, _a, _CustomEvent_detail, _b;\nconst isCaptureEventListener = (options) => (typeof options === 'boolean' ? options : options?.capture ?? false);\n// Event phases\nconst NONE = 0;\nconst CAPTURING_PHASE = 1;\nconst AT_TARGET = 2;\nconst BUBBLING_PHASE = 3;\n// Shim the global EventTarget object\nconst EventTargetShim = class EventTarget {\n    constructor() {\n        this.__eventListeners = new Map();\n        this.__captureEventListeners = new Map();\n    }\n    addEventListener(type, callback, options) {\n        if (callback === undefined || callback === null) {\n            return;\n        }\n        const eventListenersMap = isCaptureEventListener(options)\n            ? this.__captureEventListeners\n            : this.__eventListeners;\n        let eventListeners = eventListenersMap.get(type);\n        if (eventListeners === undefined) {\n            eventListeners = new Map();\n            eventListenersMap.set(type, eventListeners);\n        }\n        else if (eventListeners.has(callback)) {\n            return;\n        }\n        const normalizedOptions = typeof options === 'object' && options ? options : {};\n        normalizedOptions.signal?.addEventListener('abort', () => this.removeEventListener(type, callback, options));\n        eventListeners.set(callback, normalizedOptions ?? {});\n    }\n    removeEventListener(type, callback, options) {\n        if (callback === undefined || callback === null) {\n            return;\n        }\n        const eventListenersMap = isCaptureEventListener(options)\n            ? this.__captureEventListeners\n            : this.__eventListeners;\n        const eventListeners = eventListenersMap.get(type);\n        if (eventListeners !== undefined) {\n            eventListeners.delete(callback);\n            if (!eventListeners.size) {\n                eventListenersMap.delete(type);\n            }\n        }\n    }\n    dispatchEvent(event) {\n        const composedPath = [this];\n        let parent = this.__eventTargetParent;\n        if (event.composed) {\n            while (parent) {\n                composedPath.push(parent);\n                parent = parent.__eventTargetParent;\n            }\n        }\n        else {\n            // If the event is not composed and the event was dispatched inside\n            // shadow DOM, we need to stop before the host of the shadow DOM.\n            while (parent && parent !== this.__host) {\n                composedPath.push(parent);\n                parent = parent.__eventTargetParent;\n            }\n        }\n        // We need to patch various properties that would either be empty or wrong\n        // in this scenario.\n        let stopPropagation = false;\n        let stopImmediatePropagation = false;\n        let eventPhase = NONE;\n        let target = null;\n        let tmpTarget = null;\n        let currentTarget = null;\n        const originalStopPropagation = event.stopPropagation;\n        const originalStopImmediatePropagation = event.stopImmediatePropagation;\n        Object.defineProperties(event, {\n            target: {\n                get() {\n                    return target ?? tmpTarget;\n                },\n                ...enumerableProperty,\n            },\n            srcElement: {\n                get() {\n                    return event.target;\n                },\n                ...enumerableProperty,\n            },\n            currentTarget: {\n                get() {\n                    return currentTarget;\n                },\n                ...enumerableProperty,\n            },\n            eventPhase: {\n                get() {\n                    return eventPhase;\n                },\n                ...enumerableProperty,\n            },\n            composedPath: {\n                value: () => composedPath,\n                ...enumerableProperty,\n            },\n            stopPropagation: {\n                value: () => {\n                    stopPropagation = true;\n                    originalStopPropagation.call(event);\n                },\n                ...enumerableProperty,\n            },\n            stopImmediatePropagation: {\n                value: () => {\n                    stopImmediatePropagation = true;\n                    originalStopImmediatePropagation.call(event);\n                },\n                ...enumerableProperty,\n            },\n        });\n        // An event handler can either be a function, an object with a handleEvent\n        // method or null. This function takes care to call the event handler\n        // correctly.\n        const invokeEventListener = (listener, options, eventListenerMap) => {\n            if (typeof listener === 'function') {\n                listener(event);\n            }\n            else if (typeof listener?.handleEvent === 'function') {\n                listener.handleEvent(event);\n            }\n            if (options.once) {\n                eventListenerMap.delete(listener);\n            }\n        };\n        // When an event is finished being dispatched, which can be after the event\n        // tree has been traversed or stopPropagation/stopImmediatePropagation has\n        // been called. Once that is the case, the currentTarget and eventPhase\n        // need to be reset and a value, representing whether the event has not\n        // been prevented, needs to be returned.\n        const finishDispatch = () => {\n            currentTarget = null;\n            eventPhase = NONE;\n            return !event.defaultPrevented;\n        };\n        // An event starts with the capture order, where it starts from the top.\n        // This is done even if bubbles is set to false, which is the default.\n        const captureEventPath = composedPath.slice().reverse();\n        // If the event target, which dispatches the event, is either in the light DOM\n        // or the event is not composed, the target is always itself. If that is not\n        // the case, the target needs to be retargeted: https://dom.spec.whatwg.org/#retarget\n        target = !this.__host || !event.composed ? this : null;\n        const retarget = (eventTargets) => {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            tmpTarget = this;\n            while (tmpTarget.__host && eventTargets.includes(tmpTarget.__host)) {\n                tmpTarget = tmpTarget.__host;\n            }\n        };\n        for (const eventTarget of captureEventPath) {\n            if (!target && (!tmpTarget || tmpTarget === eventTarget.__host)) {\n                retarget(captureEventPath.slice(captureEventPath.indexOf(eventTarget)));\n            }\n            currentTarget = eventTarget;\n            eventPhase = eventTarget === event.target ? AT_TARGET : CAPTURING_PHASE;\n            const captureEventListeners = eventTarget.__captureEventListeners.get(event.type);\n            if (captureEventListeners) {\n                for (const [listener, options] of captureEventListeners) {\n                    invokeEventListener(listener, options, captureEventListeners);\n                    if (stopImmediatePropagation) {\n                        // Event.stopImmediatePropagation() stops any following invocation\n                        // of an event handler even on the same event target.\n                        return finishDispatch();\n                    }\n                }\n            }\n            if (stopPropagation) {\n                // Event.stopPropagation() stops any following invocation\n                // of an event handler for any following event targets.\n                return finishDispatch();\n            }\n        }\n        const bubbleEventPath = event.bubbles ? composedPath : [this];\n        tmpTarget = null;\n        for (const eventTarget of bubbleEventPath) {\n            if (!target &&\n                (!tmpTarget || eventTarget === tmpTarget.__host)) {\n                retarget(bubbleEventPath.slice(0, bubbleEventPath.indexOf(eventTarget) + 1));\n            }\n            currentTarget = eventTarget;\n            eventPhase = eventTarget === event.target ? AT_TARGET : BUBBLING_PHASE;\n            const captureEventListeners = eventTarget.__eventListeners.get(event.type);\n            if (captureEventListeners) {\n                for (const [listener, options] of captureEventListeners) {\n                    invokeEventListener(listener, options, captureEventListeners);\n                    if (stopImmediatePropagation) {\n                        // Event.stopImmediatePropagation() stops any following invocation\n                        // of an event handler even on the same event target.\n                        return finishDispatch();\n                    }\n                }\n            }\n            if (stopPropagation) {\n                // Event.stopPropagation() stops any following invocation\n                // of an event handler for any following event targets.\n                return finishDispatch();\n            }\n        }\n        return finishDispatch();\n    }\n};\nconst EventTargetShimWithRealType = EventTargetShim;\n\nconst enumerableProperty = { __proto__: null };\nenumerableProperty.enumerable = true;\nObject.freeze(enumerableProperty);\n// TODO: Remove this when we remove support for vm modules (--experimental-vm-modules).\nconst EventShim = (_a = class Event {\n        constructor(type, options = {}) {\n            _Event_cancelable.set(this, false);\n            _Event_bubbles.set(this, false);\n            _Event_composed.set(this, false);\n            _Event_defaultPrevented.set(this, false);\n            _Event_timestamp.set(this, Date.now());\n            _Event_propagationStopped.set(this, false);\n            _Event_type.set(this, void 0);\n            _Event_target.set(this, void 0);\n            _Event_isBeingDispatched.set(this, void 0);\n            this.NONE = NONE;\n            this.CAPTURING_PHASE = CAPTURING_PHASE;\n            this.AT_TARGET = AT_TARGET;\n            this.BUBBLING_PHASE = BUBBLING_PHASE;\n            if (arguments.length === 0)\n                throw new Error(`The type argument must be specified`);\n            if (typeof options !== 'object' || !options) {\n                throw new Error(`The \"options\" argument must be an object`);\n            }\n            const { bubbles, cancelable, composed } = options;\n            __classPrivateFieldSet(this, _Event_cancelable, !!cancelable, \"f\");\n            __classPrivateFieldSet(this, _Event_bubbles, !!bubbles, \"f\");\n            __classPrivateFieldSet(this, _Event_composed, !!composed, \"f\");\n            __classPrivateFieldSet(this, _Event_type, `${type}`, \"f\");\n            __classPrivateFieldSet(this, _Event_target, null, \"f\");\n            __classPrivateFieldSet(this, _Event_isBeingDispatched, false, \"f\");\n        }\n        initEvent(_type, _bubbles, _cancelable) {\n            throw new Error('Method not implemented.');\n        }\n        stopImmediatePropagation() {\n            this.stopPropagation();\n        }\n        preventDefault() {\n            __classPrivateFieldSet(this, _Event_defaultPrevented, true, \"f\");\n        }\n        get target() {\n            return __classPrivateFieldGet(this, _Event_target, \"f\");\n        }\n        get currentTarget() {\n            return __classPrivateFieldGet(this, _Event_target, \"f\");\n        }\n        get srcElement() {\n            return __classPrivateFieldGet(this, _Event_target, \"f\");\n        }\n        get type() {\n            return __classPrivateFieldGet(this, _Event_type, \"f\");\n        }\n        get cancelable() {\n            return __classPrivateFieldGet(this, _Event_cancelable, \"f\");\n        }\n        get defaultPrevented() {\n            return __classPrivateFieldGet(this, _Event_cancelable, \"f\") && __classPrivateFieldGet(this, _Event_defaultPrevented, \"f\");\n        }\n        get timeStamp() {\n            return __classPrivateFieldGet(this, _Event_timestamp, \"f\");\n        }\n        composedPath() {\n            return __classPrivateFieldGet(this, _Event_isBeingDispatched, \"f\") ? [__classPrivateFieldGet(this, _Event_target, \"f\")] : [];\n        }\n        get returnValue() {\n            return !__classPrivateFieldGet(this, _Event_cancelable, \"f\") || !__classPrivateFieldGet(this, _Event_defaultPrevented, \"f\");\n        }\n        get bubbles() {\n            return __classPrivateFieldGet(this, _Event_bubbles, \"f\");\n        }\n        get composed() {\n            return __classPrivateFieldGet(this, _Event_composed, \"f\");\n        }\n        get eventPhase() {\n            return __classPrivateFieldGet(this, _Event_isBeingDispatched, \"f\") ? _a.AT_TARGET : _a.NONE;\n        }\n        get cancelBubble() {\n            return __classPrivateFieldGet(this, _Event_propagationStopped, \"f\");\n        }\n        set cancelBubble(value) {\n            if (value) {\n                __classPrivateFieldSet(this, _Event_propagationStopped, true, \"f\");\n            }\n        }\n        stopPropagation() {\n            __classPrivateFieldSet(this, _Event_propagationStopped, true, \"f\");\n        }\n        get isTrusted() {\n            return false;\n        }\n    },\n    _Event_cancelable = new WeakMap(),\n    _Event_bubbles = new WeakMap(),\n    _Event_composed = new WeakMap(),\n    _Event_defaultPrevented = new WeakMap(),\n    _Event_timestamp = new WeakMap(),\n    _Event_propagationStopped = new WeakMap(),\n    _Event_type = new WeakMap(),\n    _Event_target = new WeakMap(),\n    _Event_isBeingDispatched = new WeakMap(),\n    _a.NONE = NONE,\n    _a.CAPTURING_PHASE = CAPTURING_PHASE,\n    _a.AT_TARGET = AT_TARGET,\n    _a.BUBBLING_PHASE = BUBBLING_PHASE,\n    _a);\nObject.defineProperties(EventShim.prototype, {\n    initEvent: enumerableProperty,\n    stopImmediatePropagation: enumerableProperty,\n    preventDefault: enumerableProperty,\n    target: enumerableProperty,\n    currentTarget: enumerableProperty,\n    srcElement: enumerableProperty,\n    type: enumerableProperty,\n    cancelable: enumerableProperty,\n    defaultPrevented: enumerableProperty,\n    timeStamp: enumerableProperty,\n    composedPath: enumerableProperty,\n    returnValue: enumerableProperty,\n    bubbles: enumerableProperty,\n    composed: enumerableProperty,\n    eventPhase: enumerableProperty,\n    cancelBubble: enumerableProperty,\n    stopPropagation: enumerableProperty,\n    isTrusted: enumerableProperty,\n});\n// TODO: Remove this when we remove support for vm modules (--experimental-vm-modules).\nconst CustomEventShim = (_b = class CustomEvent extends EventShim {\n        constructor(type, options = {}) {\n            super(type, options);\n            _CustomEvent_detail.set(this, void 0);\n            __classPrivateFieldSet(this, _CustomEvent_detail, options?.detail ?? null, \"f\");\n        }\n        initCustomEvent(_type, _bubbles, _cancelable, _detail) {\n            throw new Error('Method not implemented.');\n        }\n        get detail() {\n            return __classPrivateFieldGet(this, _CustomEvent_detail, \"f\");\n        }\n    },\n    _CustomEvent_detail = new WeakMap(),\n    _b);\nObject.defineProperties(CustomEventShim.prototype, {\n    detail: enumerableProperty,\n});\nconst EventShimWithRealType = EventShim;\nconst CustomEventShimWithRealType = CustomEventShim;\n\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lit-labs/ssr-dom-shim/lib/events.js\n");

/***/ })

};
;